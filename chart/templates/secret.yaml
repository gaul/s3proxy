{{- if empty .Values.existingSecretName }}
{{- $baseName := include "s3proxy.fullname" . -}}
{{- $fullName := printf "%s-%s" $baseName "secret" -}}

apiVersion: v1
kind: Secret
metadata:
  name: "{{ print $fullName }}"
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secret := (lookup "v1" "Secret" .Release.Namespace $fullName) | default dict }}
  # set $values to existing secret data or generate a random one when not exists
  {{- $access_key := (get $secret "AWS_ACCESS_KEY_ID") | default (randAlphaNum 16 | b64enc) }}
  {{- $access_secret := (get $secret "AWS_SECRET_ACCESS_KEY") | default (randAlphaNum 32 | b64enc) }}
  # generate 32 chars long random string, base64 encode it and then double-quote the result string.
  AWS_ACCESS_KEY_ID: {{ $access_key | b64enc | quote }}
  AWS_SECRET_ACCESS_KEY: {{ $access_secret | b64enc | quote }}
{{- end }}